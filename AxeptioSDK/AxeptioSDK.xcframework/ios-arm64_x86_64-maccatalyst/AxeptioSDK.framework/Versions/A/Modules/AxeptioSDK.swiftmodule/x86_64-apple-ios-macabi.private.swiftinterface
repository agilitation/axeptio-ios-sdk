// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios13.1-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AxeptioSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AppKit
import DeveloperToolsSupport
import Foundation
import SafariServices
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(Axeptio) public class AxeptioObjCWrapper : NSObject {
  @objc public static var token: String {
    @objc get
    @objc set
  }
  @objc public static func initialize(clientId: String, version: String, completionHandler: @escaping (Error?) -> Void)
  @available(*, deprecated, renamed: "initialize")
  @objc public static func rerere(clientId: String, version: String, completionHandler: @escaping (Error?) -> Void)
  @objc public static func hasUserConsent(forVendor name: String) -> Bool
  @objc public static func getUserConsent(forVendor name: String) -> Bool
  @objc public static func clearUserConsents()
  @objc public static func setUserConsentToDisagreeWithAll()
  @discardableResult
  @objc public static func showConsentController(initialStepIndex: Int = 0, onlyFirstTime: Bool = true, in viewController: UIViewController, animated: Bool = true, completionHandler: @escaping (Error?) -> Void) -> (() -> Void)?
  @objc deinit
}
extension URLSession {
  public typealias CancellationHandler = () -> Void
  public typealias ProcessingHandler<Result> = (Data, URLResponse) throws -> Result
  public typealias CompletionHandler<Result> = (Result?, Data?, Bool, Error?) -> Void
  @discardableResult
  public func dataTask<Result>(with request: URLRequest, processingHandler: @escaping ProcessingHandler<Result>, completionHandler: @escaping CompletionHandler<Result>) -> CancellationHandler
  @discardableResult
  public func jsonTask<Result>(with request: URLRequest, dateFormatter: DateFormatter? = nil, completionHandler: @escaping (Int?, Result?, Data?, Bool, Error?) -> Void) -> CancellationHandler where Result : Swift.Decodable
}
@_hasMissingDesignatedInitializers final public class KeychainManager {
  public static func passwordData(key: String) -> Data?
  public static func password(key: String) -> String?
  public static func setPasswordData(_ data: Data?, key: String, options: [CFString : AnyObject] = [kSecAttrAccessible: kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly])
  public static func setPassword(_ password: String?, key: String, options: [CFString : AnyObject] = [kSecAttrAccessible: kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly])
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Axeptio {
  public static let shared: AxeptioSDK.Axeptio
  public enum Error : String, LocalizedError {
    case notInitialized
    case invalidClientId
    case unknownVersion
    case networkFailed
    case apiFailed
    public var errorDescription: String? {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  final public var logErrors: Swift.Bool
  final public var token: String
  final public func initialize(clientId: String, version: String, completionHandler: @escaping (Error?) -> Void)
  @available(*, deprecated, renamed: "initialize")
  final public func rerere(clientId: String, version: String, completionHandler: @escaping (Error?) -> Void)
  final public func getUserConsent(forVendor name: String) -> Bool?
  final public func getVendors() -> [String]
  final public func clearUserConsents()
  final public func setUserConsentToDisagreeWithAll()
  @discardableResult
  final public func showConsentController(initialStepIndex: Int = 0, onlyFirstTime: Bool = true, in viewController: UIViewController, animated: Bool = true, completionHandler: @escaping (Error?) -> Void) -> (() -> Void)?
  @objc deinit
}
extension AxeptioSDK.Axeptio.Error : Swift.Equatable {}
extension AxeptioSDK.Axeptio.Error : Swift.Hashable {}
extension AxeptioSDK.Axeptio.Error : Swift.RawRepresentable {}
