// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AxeptioSDK
import Alamofire
import Foundation
import KeychainSwift
import Kingfisher
import SafariServices
import Swift
import UIKit
@_inheritsConvenienceInitializers @objc(Axeptio) public class AxeptioObjCWrapper : ObjectiveC.NSObject {
  @objc public func initialize(clientId: Swift.String, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func hasUserConsent(forVendor name: Swift.String) -> Swift.Bool
  @objc public func getUserConsent(forVendor name: Swift.String) -> Swift.Bool
  @objc public func clearUserConsents()
  @discardableResult
  @objc public func showCookiesController(version: Swift.String, onlyFirstTime: Swift.Bool = true, in viewController: UIKit.UIViewController, animated: Swift.Bool = true, completionHandler: @escaping (Swift.Error?) -> Swift.Void) -> (() -> Swift.Void)?
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers final public class Axeptio {
  public static let shared: AxeptioSDK.Axeptio
  public enum Error : Swift.Error {
    case notInitialized
    case alreadyInitialized
    case invalidClientId
    case unknownVersion
    case networkFailed
    case apiFailed
    public static func == (a: AxeptioSDK.Axeptio.Error, b: AxeptioSDK.Axeptio.Error) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  final public func initialize(clientId: Swift.String, completionHandler: @escaping (AxeptioSDK.Axeptio.Error?) -> Swift.Void)
  final public func getUserConsent(forVendor name: Swift.String) -> Swift.Bool?
  final public func clearUserConsents()
  @discardableResult
  final public func showCookiesController(version: Swift.String, onlyFirstTime: Swift.Bool = true, in viewController: UIKit.UIViewController, animated: Swift.Bool = true, completionHandler: @escaping (AxeptioSDK.Axeptio.Error?) -> Swift.Void) -> (() -> Swift.Void)?
  @objc deinit
}
extension AxeptioSDK.Axeptio.Error : Swift.Equatable {}
extension AxeptioSDK.Axeptio.Error : Swift.Hashable {}
